#include "excom.h"

PREFIX(
  int excom_protocol_write_packet(excom_buffer_t* out,
    excom_packet_t* packet);
  void excom_protocol_prefill(excom_packet_t* packet, ...);
);

BEFORE(
  uint16_t id = 0;
);

SET("protocol packet packing");

#define TEST_PACKET(name, body, fill)             \
  TEST(#name " pack",                             \
  {                                               \
    id += 1;                                      \
    excom_packet_t packet;                        \
    excom_buffer_t buffer;                        \
    excom_protocol_##name##_t* pack_data;         \
    pack_data = &packet.data.name;                \
    (void) pack_data;                             \
    body;                                         \
    packet.id   = id;                             \
    packet.type = packet(name);                   \
    uassert_empty(excom_buffer_init(&buffer, 64));\
    excom_protocol_write_packet(&buffer, &packet);\
    uassert(buffer.used == sizeof(fill) - 1);     \
    uassert_same((char*) buffer.buf,              \
      fill, sizeof(fill) - 1);                    \
    excom_buffer_destroy(&buffer);                \
  })

TEST_PACKET(ok, {}, "\0\0\0\0\0\x01\0\x01");

TEST_PACKET(reject,
{
  pack_data->reason = 0x40;
}, "\0\0\0\x01\0\x02\0\x02\x40");

TEST_PACKET(error,
{
  pack_data->reason = 56;
}, "\0\0\0\x01\0\x03\0\x03\x38");


TEST_PACKET(protocol_version,
{
  excom_string_init(&pack_data->version);
  excom_string_fill(&pack_data->version,
    strlen("1.0.0"), "1.0.0");
  pack_data->major = 1;
  pack_data->minor = 0;
  pack_data->patch = 0;
}, "\0\0\0\x0c\0\x04\0\x04\0\0\0\0051.0.0\x01\0\0");

TEST_PACKET(command,
{
  excom_string_init(&pack_data->command);
  excom_string_fill(&pack_data->command,
    strlen("test"), "test");
}, "\0\0\0\x08\0\x05\0\x05\0\0\0\004test");

#undef TEST_PACKET
SET("protocol packet unpacking");

#define TEST_PACKET(name, str, body)              \
  TEST(#name " unpack", {                         \
    excom_buffer_t buf;                           \
    excom_packet_t packet;                        \
    memset(&packet, 0xdd, sizeof(excom_packet_t));\
    excom_protocol_##name##_t pack_data;          \
    excom_buffer_init(&buf, 16);                  \
    excom_buffer_cappend(&buf, str, sizeof(str)); \
    uassert_empty(                                \
      excom_protocol_read_packet(&buf, &packet)   \
    );                                            \
    id++;                                         \
    uassert_equal(packet.type, packet(name));     \
    uassert_equal(packet.size, sizeof(str) - 9);  \
    uassert_equal(packet.id, id);                 \
    pack_data = packet.data.name;                 \
    (void) pack_data;                             \
    body;                                         \
    excom_buffer_destroy(&buf);                   \
  })

TEST_PACKET(ok, "\0\0\0\0\0\x06\0\x01", {});

TEST_PACKET(reject, "\0\0\0\x01\0\x07\0\x02\x40",
{
  uassert_equal(pack_data.reason, 0x40);
});

#undef TEST_PACKET
SET("packet management");

TEST("prefill",
{
  excom_packet_t packet;
  packet.type = packet(protocol_version);
  excom_protocol_prefill(&packet, "1.0.0", 1, 0, 0);

# define pv packet.data.protocol_version

  uassert_same(pv.version.body, "1.0.0", 5);
  uassert_equal(pv.major, 1);
  uassert_equal(pv.minor, 0);
  uassert_equal(pv.patch, 0);
})
